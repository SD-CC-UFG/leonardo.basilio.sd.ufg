// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AuthServer.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Chat.Grpc {
  public static partial class Auth
  {
    static readonly string __ServiceName = "Chat.Grpc.Auth";

    static readonly grpc::Marshaller<global::Chat.Grpc.UserLogin> __Marshaller_Chat_Grpc_UserLogin = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Chat.Grpc.UserLogin.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Chat.Grpc.UserCredential> __Marshaller_Chat_Grpc_UserCredential = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Chat.Grpc.UserCredential.Parser.ParseFrom);

    static readonly grpc::Method<global::Chat.Grpc.UserLogin, global::Chat.Grpc.UserCredential> __Method_Authenticate = new grpc::Method<global::Chat.Grpc.UserLogin, global::Chat.Grpc.UserCredential>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Authenticate",
        __Marshaller_Chat_Grpc_UserLogin,
        __Marshaller_Chat_Grpc_UserCredential);

    static readonly grpc::Method<global::Chat.Grpc.UserLogin, global::Chat.Grpc.UserCredential> __Method_SignUp = new grpc::Method<global::Chat.Grpc.UserLogin, global::Chat.Grpc.UserCredential>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SignUp",
        __Marshaller_Chat_Grpc_UserLogin,
        __Marshaller_Chat_Grpc_UserCredential);

    static readonly grpc::Method<global::Chat.Grpc.UserCredential, global::Chat.Grpc.UserCredential> __Method_RenewCredential = new grpc::Method<global::Chat.Grpc.UserCredential, global::Chat.Grpc.UserCredential>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RenewCredential",
        __Marshaller_Chat_Grpc_UserCredential,
        __Marshaller_Chat_Grpc_UserCredential);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Chat.Grpc.AuthServerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Auth</summary>
    public abstract partial class AuthBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Chat.Grpc.UserCredential> Authenticate(global::Chat.Grpc.UserLogin request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Chat.Grpc.UserCredential> SignUp(global::Chat.Grpc.UserLogin request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Chat.Grpc.UserCredential> RenewCredential(global::Chat.Grpc.UserCredential request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Auth</summary>
    public partial class AuthClient : grpc::ClientBase<AuthClient>
    {
      /// <summary>Creates a new client for Auth</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AuthClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Auth that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AuthClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AuthClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AuthClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Chat.Grpc.UserCredential Authenticate(global::Chat.Grpc.UserLogin request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Authenticate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Chat.Grpc.UserCredential Authenticate(global::Chat.Grpc.UserLogin request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Authenticate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Chat.Grpc.UserCredential> AuthenticateAsync(global::Chat.Grpc.UserLogin request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthenticateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Chat.Grpc.UserCredential> AuthenticateAsync(global::Chat.Grpc.UserLogin request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Authenticate, null, options, request);
      }
      public virtual global::Chat.Grpc.UserCredential SignUp(global::Chat.Grpc.UserLogin request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignUp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Chat.Grpc.UserCredential SignUp(global::Chat.Grpc.UserLogin request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignUp, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Chat.Grpc.UserCredential> SignUpAsync(global::Chat.Grpc.UserLogin request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignUpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Chat.Grpc.UserCredential> SignUpAsync(global::Chat.Grpc.UserLogin request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignUp, null, options, request);
      }
      public virtual global::Chat.Grpc.UserCredential RenewCredential(global::Chat.Grpc.UserCredential request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RenewCredential(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Chat.Grpc.UserCredential RenewCredential(global::Chat.Grpc.UserCredential request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RenewCredential, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Chat.Grpc.UserCredential> RenewCredentialAsync(global::Chat.Grpc.UserCredential request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RenewCredentialAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Chat.Grpc.UserCredential> RenewCredentialAsync(global::Chat.Grpc.UserCredential request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RenewCredential, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AuthClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AuthClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AuthBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Authenticate, serviceImpl.Authenticate)
          .AddMethod(__Method_SignUp, serviceImpl.SignUp)
          .AddMethod(__Method_RenewCredential, serviceImpl.RenewCredential).Build();
    }

  }
}
#endregion
