// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NamingServer.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Chat.Grpc {
  public static partial class NamingServer
  {
    static readonly string __ServiceName = "Chat.Grpc.NamingServer";

    static readonly grpc::Marshaller<global::Chat.Grpc.ServiceRequest> __Marshaller_Chat_Grpc_ServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Chat.Grpc.ServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Chat.Grpc.ServiceResponse> __Marshaller_Chat_Grpc_ServiceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Chat.Grpc.ServiceResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Chat.Grpc.ServiceRequest, global::Chat.Grpc.ServiceResponse> __Method_GetServiceLocation = new grpc::Method<global::Chat.Grpc.ServiceRequest, global::Chat.Grpc.ServiceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceLocation",
        __Marshaller_Chat_Grpc_ServiceRequest,
        __Marshaller_Chat_Grpc_ServiceResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Chat.Grpc.NamingServerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of NamingServer</summary>
    public abstract partial class NamingServerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Chat.Grpc.ServiceResponse> GetServiceLocation(global::Chat.Grpc.ServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NamingServer</summary>
    public partial class NamingServerClient : grpc::ClientBase<NamingServerClient>
    {
      /// <summary>Creates a new client for NamingServer</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NamingServerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NamingServer that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NamingServerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NamingServerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NamingServerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Chat.Grpc.ServiceResponse GetServiceLocation(global::Chat.Grpc.ServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceLocation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Chat.Grpc.ServiceResponse GetServiceLocation(global::Chat.Grpc.ServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceLocation, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Chat.Grpc.ServiceResponse> GetServiceLocationAsync(global::Chat.Grpc.ServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceLocationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Chat.Grpc.ServiceResponse> GetServiceLocationAsync(global::Chat.Grpc.ServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceLocation, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NamingServerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NamingServerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NamingServerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetServiceLocation, serviceImpl.GetServiceLocation).Build();
    }

  }
}
#endregion
