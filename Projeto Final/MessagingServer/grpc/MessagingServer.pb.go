// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MessagingServer.proto

package grpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChatMessageType int32

const (
	ChatMessageType_TEXT    ChatMessageType = 0
	ChatMessageType_CONTROL ChatMessageType = 1
	ChatMessageType_ERROR   ChatMessageType = 2
)

var ChatMessageType_name = map[int32]string{
	0: "TEXT",
	1: "CONTROL",
	2: "ERROR",
}

var ChatMessageType_value = map[string]int32{
	"TEXT":    0,
	"CONTROL": 1,
	"ERROR":   2,
}

func (x ChatMessageType) String() string {
	return proto.EnumName(ChatMessageType_name, int32(x))
}

func (ChatMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e08173c4f010cdc7, []int{0}
}

type ControlMessageType int32

const (
	ControlMessageType_JOINED  ControlMessageType = 0
	ControlMessageType_AWAY    ControlMessageType = 1
	ControlMessageType_NAWAY   ControlMessageType = 2
	ControlMessageType_QUITTED ControlMessageType = 3
)

var ControlMessageType_name = map[int32]string{
	0: "JOINED",
	1: "AWAY",
	2: "NAWAY",
	3: "QUITTED",
}

var ControlMessageType_value = map[string]int32{
	"JOINED":  0,
	"AWAY":    1,
	"NAWAY":   2,
	"QUITTED": 3,
}

func (x ControlMessageType) String() string {
	return proto.EnumName(ControlMessageType_name, int32(x))
}

func (ControlMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e08173c4f010cdc7, []int{1}
}

type ControlMessage struct {
	Type                 ControlMessageType `protobuf:"varint,1,opt,name=type,proto3,enum=Chat.Grpc.ControlMessageType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ControlMessage) Reset()         { *m = ControlMessage{} }
func (m *ControlMessage) String() string { return proto.CompactTextString(m) }
func (*ControlMessage) ProtoMessage()    {}
func (*ControlMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e08173c4f010cdc7, []int{0}
}

func (m *ControlMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlMessage.Unmarshal(m, b)
}
func (m *ControlMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlMessage.Marshal(b, m, deterministic)
}
func (m *ControlMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlMessage.Merge(m, src)
}
func (m *ControlMessage) XXX_Size() int {
	return xxx_messageInfo_ControlMessage.Size(m)
}
func (m *ControlMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ControlMessage proto.InternalMessageInfo

func (m *ControlMessage) GetType() ControlMessageType {
	if m != nil {
		return m.Type
	}
	return ControlMessageType_JOINED
}

type TextMessage struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TextMessage) Reset()         { *m = TextMessage{} }
func (m *TextMessage) String() string { return proto.CompactTextString(m) }
func (*TextMessage) ProtoMessage()    {}
func (*TextMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e08173c4f010cdc7, []int{1}
}

func (m *TextMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TextMessage.Unmarshal(m, b)
}
func (m *TextMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TextMessage.Marshal(b, m, deterministic)
}
func (m *TextMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextMessage.Merge(m, src)
}
func (m *TextMessage) XXX_Size() int {
	return xxx_messageInfo_TextMessage.Size(m)
}
func (m *TextMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TextMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TextMessage proto.InternalMessageInfo

func (m *TextMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type ErrorMessage struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorMessage) Reset()         { *m = ErrorMessage{} }
func (m *ErrorMessage) String() string { return proto.CompactTextString(m) }
func (*ErrorMessage) ProtoMessage()    {}
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e08173c4f010cdc7, []int{2}
}

func (m *ErrorMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorMessage.Unmarshal(m, b)
}
func (m *ErrorMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorMessage.Marshal(b, m, deterministic)
}
func (m *ErrorMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorMessage.Merge(m, src)
}
func (m *ErrorMessage) XXX_Size() int {
	return xxx_messageInfo_ErrorMessage.Size(m)
}
func (m *ErrorMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorMessage proto.InternalMessageInfo

func (m *ErrorMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type ChatMessage struct {
	Type           ChatMessageType `protobuf:"varint,1,opt,name=type,proto3,enum=Chat.Grpc.ChatMessageType" json:"type,omitempty"`
	UserCredential *UserCredential `protobuf:"bytes,2,opt,name=user_credential,json=userCredential,proto3" json:"user_credential,omitempty"`
	Timestamp      uint32          `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature      []byte          `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Topic          string          `protobuf:"bytes,7,opt,name=topic,proto3" json:"topic,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*ChatMessage_Text
	//	*ChatMessage_Control
	//	*ChatMessage_Error
	Payload              isChatMessage_Payload `protobuf_oneof:"payload"`
	External             bool                  `protobuf:"varint,9,opt,name=external,proto3" json:"external,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e08173c4f010cdc7, []int{3}
}

func (m *ChatMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessage.Unmarshal(m, b)
}
func (m *ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessage.Marshal(b, m, deterministic)
}
func (m *ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessage.Merge(m, src)
}
func (m *ChatMessage) XXX_Size() int {
	return xxx_messageInfo_ChatMessage.Size(m)
}
func (m *ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessage proto.InternalMessageInfo

func (m *ChatMessage) GetType() ChatMessageType {
	if m != nil {
		return m.Type
	}
	return ChatMessageType_TEXT
}

func (m *ChatMessage) GetUserCredential() *UserCredential {
	if m != nil {
		return m.UserCredential
	}
	return nil
}

func (m *ChatMessage) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ChatMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ChatMessage) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type isChatMessage_Payload interface {
	isChatMessage_Payload()
}

type ChatMessage_Text struct {
	Text *TextMessage `protobuf:"bytes,4,opt,name=text,proto3,oneof"`
}

type ChatMessage_Control struct {
	Control *ControlMessage `protobuf:"bytes,5,opt,name=control,proto3,oneof"`
}

type ChatMessage_Error struct {
	Error *ErrorMessage `protobuf:"bytes,8,opt,name=error,proto3,oneof"`
}

func (*ChatMessage_Text) isChatMessage_Payload() {}

func (*ChatMessage_Control) isChatMessage_Payload() {}

func (*ChatMessage_Error) isChatMessage_Payload() {}

func (m *ChatMessage) GetPayload() isChatMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ChatMessage) GetText() *TextMessage {
	if x, ok := m.GetPayload().(*ChatMessage_Text); ok {
		return x.Text
	}
	return nil
}

func (m *ChatMessage) GetControl() *ControlMessage {
	if x, ok := m.GetPayload().(*ChatMessage_Control); ok {
		return x.Control
	}
	return nil
}

func (m *ChatMessage) GetError() *ErrorMessage {
	if x, ok := m.GetPayload().(*ChatMessage_Error); ok {
		return x.Error
	}
	return nil
}

func (m *ChatMessage) GetExternal() bool {
	if m != nil {
		return m.External
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ChatMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ChatMessage_OneofMarshaler, _ChatMessage_OneofUnmarshaler, _ChatMessage_OneofSizer, []interface{}{
		(*ChatMessage_Text)(nil),
		(*ChatMessage_Control)(nil),
		(*ChatMessage_Error)(nil),
	}
}

func _ChatMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ChatMessage)
	// payload
	switch x := m.Payload.(type) {
	case *ChatMessage_Text:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Text); err != nil {
			return err
		}
	case *ChatMessage_Control:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Control); err != nil {
			return err
		}
	case *ChatMessage_Error:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ChatMessage.Payload has unexpected type %T", x)
	}
	return nil
}

func _ChatMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ChatMessage)
	switch tag {
	case 4: // payload.text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TextMessage)
		err := b.DecodeMessage(msg)
		m.Payload = &ChatMessage_Text{msg}
		return true, err
	case 5: // payload.control
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ControlMessage)
		err := b.DecodeMessage(msg)
		m.Payload = &ChatMessage_Control{msg}
		return true, err
	case 8: // payload.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ErrorMessage)
		err := b.DecodeMessage(msg)
		m.Payload = &ChatMessage_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ChatMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ChatMessage)
	// payload
	switch x := m.Payload.(type) {
	case *ChatMessage_Text:
		s := proto.Size(x.Text)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChatMessage_Control:
		s := proto.Size(x.Control)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChatMessage_Error:
		s := proto.Size(x.Error)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SubscribeRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Ip                   string   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e08173c4f010cdc7, []int{4}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SubscribeRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *SubscribeRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type SubscribeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e08173c4f010cdc7, []int{5}
}

func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

type PublishResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e08173c4f010cdc7, []int{6}
}

func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("Chat.Grpc.ChatMessageType", ChatMessageType_name, ChatMessageType_value)
	proto.RegisterEnum("Chat.Grpc.ControlMessageType", ControlMessageType_name, ControlMessageType_value)
	proto.RegisterType((*ControlMessage)(nil), "Chat.Grpc.ControlMessage")
	proto.RegisterType((*TextMessage)(nil), "Chat.Grpc.TextMessage")
	proto.RegisterType((*ErrorMessage)(nil), "Chat.Grpc.ErrorMessage")
	proto.RegisterType((*ChatMessage)(nil), "Chat.Grpc.ChatMessage")
	proto.RegisterType((*SubscribeRequest)(nil), "Chat.Grpc.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "Chat.Grpc.SubscribeResponse")
	proto.RegisterType((*PublishResponse)(nil), "Chat.Grpc.PublishResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessagingClient is the client API for Messaging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessagingClient interface {
	TalkAndListen(ctx context.Context, opts ...grpc.CallOption) (Messaging_TalkAndListenClient, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	Unsubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	Publish(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*PublishResponse, error)
}

type messagingClient struct {
	cc *grpc.ClientConn
}

func NewMessagingClient(cc *grpc.ClientConn) MessagingClient {
	return &messagingClient{cc}
}

func (c *messagingClient) TalkAndListen(ctx context.Context, opts ...grpc.CallOption) (Messaging_TalkAndListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messaging_serviceDesc.Streams[0], "/Chat.Grpc.Messaging/TalkAndListen", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingTalkAndListenClient{stream}
	return x, nil
}

type Messaging_TalkAndListenClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type messagingTalkAndListenClient struct {
	grpc.ClientStream
}

func (x *messagingTalkAndListenClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messagingTalkAndListenClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/Chat.Grpc.Messaging/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) Unsubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/Chat.Grpc.Messaging/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) Publish(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/Chat.Grpc.Messaging/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagingServer is the server API for Messaging service.
type MessagingServer interface {
	TalkAndListen(Messaging_TalkAndListenServer) error
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	Unsubscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	Publish(context.Context, *ChatMessage) (*PublishResponse, error)
}

func RegisterMessagingServer(s *grpc.Server, srv MessagingServer) {
	s.RegisterService(&_Messaging_serviceDesc, srv)
}

func _Messaging_TalkAndListen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessagingServer).TalkAndListen(&messagingTalkAndListenServer{stream})
}

type Messaging_TalkAndListenServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type messagingTalkAndListenServer struct {
	grpc.ServerStream
}

func (x *messagingTalkAndListenServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messagingTalkAndListenServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Messaging_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat.Grpc.Messaging/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat.Grpc.Messaging/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).Unsubscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat.Grpc.Messaging/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).Publish(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Messaging_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Chat.Grpc.Messaging",
	HandlerType: (*MessagingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _Messaging_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Messaging_Unsubscribe_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Messaging_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TalkAndListen",
			Handler:       _Messaging_TalkAndListen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "MessagingServer.proto",
}

func init() { proto.RegisterFile("MessagingServer.proto", fileDescriptor_e08173c4f010cdc7) }

var fileDescriptor_e08173c4f010cdc7 = []byte{
	// 557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xb5, 0x9d, 0x5f, 0xdf, 0xb4, 0x89, 0x3b, 0xdf, 0x47, 0x31, 0xa1, 0x48, 0xc1, 0x2b, 0xab,
	0x42, 0x01, 0x52, 0xb1, 0x46, 0x49, 0x6a, 0x91, 0x56, 0x21, 0x81, 0xa9, 0x23, 0x7e, 0x36, 0xc8,
	0x71, 0xae, 0x12, 0x0b, 0xd7, 0x36, 0x33, 0x63, 0x94, 0xbc, 0x05, 0xaf, 0xc1, 0x5b, 0x22, 0xdb,
	0xf9, 0x71, 0xd2, 0x96, 0x15, 0xbb, 0x99, 0x3b, 0xe7, 0x1e, 0x9f, 0x73, 0xee, 0x8c, 0xe1, 0xd1,
	0x7b, 0xe4, 0xdc, 0x99, 0x7b, 0xc1, 0xfc, 0x06, 0xd9, 0x4f, 0x64, 0xed, 0x88, 0x85, 0x22, 0x24,
	0x6a, 0x7f, 0xe1, 0x88, 0xf6, 0x3b, 0x16, 0xb9, 0x4d, 0xad, 0x1b, 0x8b, 0x45, 0xfe, 0xd0, 0xe8,
	0x43, 0xbd, 0x1f, 0x06, 0x82, 0x85, 0x7e, 0xd6, 0x8c, 0xe4, 0x35, 0x14, 0xc5, 0x2a, 0x42, 0x5d,
	0x6e, 0xc9, 0x66, 0xbd, 0xf3, 0xac, 0xbd, 0xed, 0x6e, 0xef, 0x03, 0xed, 0x55, 0x84, 0x34, 0x85,
	0x1a, 0xcf, 0xa1, 0x66, 0xe3, 0x52, 0x6c, 0x18, 0x08, 0x14, 0x05, 0x2e, 0x45, 0xca, 0xa0, 0xd2,
	0x74, 0x6d, 0x18, 0x70, 0x64, 0x31, 0x16, 0xb2, 0xbf, 0x61, 0x7e, 0x15, 0xa0, 0x96, 0x7c, 0x6d,
	0x83, 0x69, 0xef, 0x29, 0x69, 0xe6, 0x95, 0xec, 0x50, 0x3b, 0x19, 0xa4, 0x07, 0x8d, 0x98, 0x23,
	0xfb, 0xe6, 0x32, 0x9c, 0x61, 0x20, 0x3c, 0xc7, 0xd7, 0x95, 0x96, 0x6c, 0xd6, 0x3a, 0x4f, 0x72,
	0xad, 0x13, 0x8e, 0xac, 0xbf, 0x05, 0xd0, 0x7a, 0xbc, 0xb7, 0x27, 0x67, 0xa0, 0x0a, 0xef, 0x16,
	0xb9, 0x70, 0x6e, 0x23, 0xbd, 0xd0, 0x92, 0xcd, 0x63, 0xba, 0x2b, 0x24, 0xa7, 0xdc, 0x9b, 0x07,
	0x8e, 0x88, 0x19, 0xea, 0xe5, 0x96, 0x6c, 0x1e, 0xd1, 0x5d, 0x81, 0xfc, 0x0f, 0x25, 0x11, 0x46,
	0x9e, 0xab, 0x57, 0x52, 0x53, 0xd9, 0x86, 0xbc, 0x58, 0x3b, 0x2d, 0xa6, 0x52, 0x4e, 0x73, 0x52,
	0x72, 0x99, 0x0d, 0xa4, 0x2c, 0x03, 0xf2, 0x06, 0x2a, 0x6e, 0x16, 0xb3, 0x5e, 0xba, 0xa3, 0x7d,
	0x7f, 0x00, 0x03, 0x89, 0x6e, 0xb0, 0xe4, 0x25, 0x94, 0x30, 0x89, 0x57, 0xaf, 0xa6, 0x4d, 0x8f,
	0x73, 0x4d, 0xf9, 0xd8, 0x07, 0x12, 0xcd, 0x70, 0xa4, 0x09, 0x55, 0x5c, 0x0a, 0x64, 0x81, 0xe3,
	0xeb, 0x6a, 0x4b, 0x36, 0xab, 0x74, 0xbb, 0xef, 0xa9, 0x50, 0x89, 0x9c, 0x95, 0x1f, 0x3a, 0x33,
	0x63, 0x08, 0xda, 0x4d, 0x3c, 0xe5, 0x2e, 0xf3, 0xa6, 0x48, 0xf1, 0x47, 0x8c, 0x5c, 0xec, 0x6c,
	0xca, 0x79, 0x9b, 0x75, 0x50, 0xbc, 0x2c, 0x31, 0x95, 0x2a, 0x5e, 0x94, 0x0c, 0x38, 0x0a, 0x99,
	0x48, 0x27, 0x50, 0xa2, 0xe9, 0xda, 0xf8, 0x0f, 0x4e, 0x72, 0x6c, 0x3c, 0x0a, 0x03, 0x8e, 0xc6,
	0x09, 0x34, 0x3e, 0xc4, 0x53, 0xdf, 0xe3, 0x8b, 0x4d, 0xe9, 0xfc, 0x02, 0x1a, 0x07, 0x13, 0x26,
	0x55, 0x28, 0xda, 0xd6, 0x67, 0x5b, 0x93, 0x48, 0x0d, 0x2a, 0xfd, 0xf1, 0xc8, 0xa6, 0xe3, 0xa1,
	0x26, 0x13, 0x15, 0x4a, 0x16, 0xa5, 0x63, 0xaa, 0x29, 0xe7, 0x3d, 0x20, 0x77, 0x2f, 0x28, 0x01,
	0x28, 0x5f, 0x8f, 0xaf, 0x46, 0xd6, 0xa5, 0x26, 0x25, 0x1c, 0xdd, 0x4f, 0xdd, 0x2f, 0x59, 0xdb,
	0x28, 0x5d, 0x2a, 0x09, 0xdd, 0xc7, 0xc9, 0x95, 0x6d, 0x5b, 0x97, 0x5a, 0xa1, 0xf3, 0x5b, 0x01,
	0x75, 0xfb, 0x88, 0x88, 0x05, 0xc7, 0xb6, 0xe3, 0x7f, 0xef, 0x06, 0xb3, 0xa1, 0xc7, 0x05, 0x06,
	0xe4, 0xf4, 0xfe, 0x2b, 0xd8, 0x7c, 0xa0, 0x6e, 0x48, 0xa6, 0xfc, 0x4a, 0x26, 0x03, 0x50, 0xb7,
	0xae, 0xc9, 0xd3, 0x1c, 0xf4, 0x30, 0xd9, 0xe6, 0xd9, 0xfd, 0x87, 0xeb, 0xa0, 0x24, 0x72, 0x0d,
	0xb5, 0x49, 0xc0, 0xff, 0x0d, 0xd7, 0x5b, 0xa8, 0xac, 0x63, 0x7f, 0xd0, 0x56, 0xfe, 0xc5, 0x1d,
	0x8c, 0xc8, 0x90, 0x7a, 0xe5, 0xaf, 0xc5, 0x39, 0x8b, 0xdc, 0x69, 0x39, 0xfd, 0x91, 0x5c, 0xfc,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x5e, 0x5d, 0xb2, 0x7e, 0x04, 0x00, 0x00,
}
