// Code generated by protoc-gen-go. DO NOT EDIT.
// source: NamingServer.proto

package grpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServiceType int32

const (
	ServiceType_AUTH      ServiceType = 0
	ServiceType_MESSAGING ServiceType = 1
)

var ServiceType_name = map[int32]string{
	0: "AUTH",
	1: "MESSAGING",
}

var ServiceType_value = map[string]int32{
	"AUTH":      0,
	"MESSAGING": 1,
}

func (x ServiceType) String() string {
	return proto.EnumName(ServiceType_name, int32(x))
}

func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a6792f453cbf7ff, []int{0}
}

type ServiceRequest struct {
	Name                 ServiceType `protobuf:"varint,1,opt,name=name,proto3,enum=Chat.Grpc.ServiceType" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ServiceRequest) Reset()         { *m = ServiceRequest{} }
func (m *ServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ServiceRequest) ProtoMessage()    {}
func (*ServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6792f453cbf7ff, []int{0}
}

func (m *ServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceRequest.Unmarshal(m, b)
}
func (m *ServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceRequest.Marshal(b, m, deterministic)
}
func (m *ServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceRequest.Merge(m, src)
}
func (m *ServiceRequest) XXX_Size() int {
	return xxx_messageInfo_ServiceRequest.Size(m)
}
func (m *ServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceRequest proto.InternalMessageInfo

func (m *ServiceRequest) GetName() ServiceType {
	if m != nil {
		return m.Name
	}
	return ServiceType_AUTH
}

type ServiceResponse struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceResponse) Reset()         { *m = ServiceResponse{} }
func (m *ServiceResponse) String() string { return proto.CompactTextString(m) }
func (*ServiceResponse) ProtoMessage()    {}
func (*ServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6792f453cbf7ff, []int{1}
}

func (m *ServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceResponse.Unmarshal(m, b)
}
func (m *ServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceResponse.Marshal(b, m, deterministic)
}
func (m *ServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceResponse.Merge(m, src)
}
func (m *ServiceResponse) XXX_Size() int {
	return xxx_messageInfo_ServiceResponse.Size(m)
}
func (m *ServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceResponse proto.InternalMessageInfo

func (m *ServiceResponse) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ServiceResponse) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type RegistrationRequest struct {
	Name                 ServiceType `protobuf:"varint,1,opt,name=name,proto3,enum=Chat.Grpc.ServiceType" json:"name,omitempty"`
	Port                 int32       `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Health               float32     `protobuf:"fixed32,2,opt,name=health,proto3" json:"health,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RegistrationRequest) Reset()         { *m = RegistrationRequest{} }
func (m *RegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*RegistrationRequest) ProtoMessage()    {}
func (*RegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6792f453cbf7ff, []int{2}
}

func (m *RegistrationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationRequest.Unmarshal(m, b)
}
func (m *RegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationRequest.Marshal(b, m, deterministic)
}
func (m *RegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationRequest.Merge(m, src)
}
func (m *RegistrationRequest) XXX_Size() int {
	return xxx_messageInfo_RegistrationRequest.Size(m)
}
func (m *RegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationRequest proto.InternalMessageInfo

func (m *RegistrationRequest) GetName() ServiceType {
	if m != nil {
		return m.Name
	}
	return ServiceType_AUTH
}

func (m *RegistrationRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *RegistrationRequest) GetHealth() float32 {
	if m != nil {
		return m.Health
	}
	return 0
}

type RegistrationResponse struct {
	Success              bool               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Ip                   string             `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Peers                []*ServiceResponse `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RegistrationResponse) Reset()         { *m = RegistrationResponse{} }
func (m *RegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*RegistrationResponse) ProtoMessage()    {}
func (*RegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6792f453cbf7ff, []int{3}
}

func (m *RegistrationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationResponse.Unmarshal(m, b)
}
func (m *RegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationResponse.Marshal(b, m, deterministic)
}
func (m *RegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationResponse.Merge(m, src)
}
func (m *RegistrationResponse) XXX_Size() int {
	return xxx_messageInfo_RegistrationResponse.Size(m)
}
func (m *RegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationResponse proto.InternalMessageInfo

func (m *RegistrationResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RegistrationResponse) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *RegistrationResponse) GetPeers() []*ServiceResponse {
	if m != nil {
		return m.Peers
	}
	return nil
}

type PingRequest struct {
	Name                 ServiceType `protobuf:"varint,1,opt,name=name,proto3,enum=Chat.Grpc.ServiceType" json:"name,omitempty"`
	Port                 int32       `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Health               float32     `protobuf:"fixed32,2,opt,name=health,proto3" json:"health,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6792f453cbf7ff, []int{4}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetName() ServiceType {
	if m != nil {
		return m.Name
	}
	return ServiceType_AUTH
}

func (m *PingRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PingRequest) GetHealth() float32 {
	if m != nil {
		return m.Health
	}
	return 0
}

type PingResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResponse) Reset()         { *m = PingResponse{} }
func (m *PingResponse) String() string { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()    {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6792f453cbf7ff, []int{5}
}

func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResponse.Unmarshal(m, b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
}
func (m *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(m, src)
}
func (m *PingResponse) XXX_Size() int {
	return xxx_messageInfo_PingResponse.Size(m)
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func (m *PingResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterEnum("Chat.Grpc.ServiceType", ServiceType_name, ServiceType_value)
	proto.RegisterType((*ServiceRequest)(nil), "Chat.Grpc.ServiceRequest")
	proto.RegisterType((*ServiceResponse)(nil), "Chat.Grpc.ServiceResponse")
	proto.RegisterType((*RegistrationRequest)(nil), "Chat.Grpc.RegistrationRequest")
	proto.RegisterType((*RegistrationResponse)(nil), "Chat.Grpc.RegistrationResponse")
	proto.RegisterType((*PingRequest)(nil), "Chat.Grpc.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "Chat.Grpc.PingResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NamingClient is the client API for Naming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NamingClient interface {
	RegisterService(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	GetServiceLocation(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type namingClient struct {
	cc *grpc.ClientConn
}

func NewNamingClient(cc *grpc.ClientConn) NamingClient {
	return &namingClient{cc}
}

func (c *namingClient) RegisterService(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, "/Chat.Grpc.Naming/RegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namingClient) GetServiceLocation(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/Chat.Grpc.Naming/GetServiceLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namingClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/Chat.Grpc.Naming/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamingServer is the server API for Naming service.
type NamingServer interface {
	RegisterService(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	GetServiceLocation(context.Context, *ServiceRequest) (*ServiceResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

func RegisterNamingServer(s *grpc.Server, srv NamingServer) {
	s.RegisterService(&_Naming_serviceDesc, srv)
}

func _Naming_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamingServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat.Grpc.Naming/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamingServer).RegisterService(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Naming_GetServiceLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamingServer).GetServiceLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat.Grpc.Naming/GetServiceLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamingServer).GetServiceLocation(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Naming_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamingServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat.Grpc.Naming/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamingServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Naming_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Chat.Grpc.Naming",
	HandlerType: (*NamingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _Naming_RegisterService_Handler,
		},
		{
			MethodName: "GetServiceLocation",
			Handler:    _Naming_GetServiceLocation_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Naming_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "NamingServer.proto",
}

func init() { proto.RegisterFile("NamingServer.proto", fileDescriptor_3a6792f453cbf7ff) }

var fileDescriptor_3a6792f453cbf7ff = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x4f, 0x4b, 0xeb, 0x40,
	0x10, 0x6f, 0xd2, 0x34, 0xaf, 0x9d, 0xbe, 0xd7, 0x96, 0x79, 0x52, 0x63, 0x0f, 0x5a, 0x72, 0x90,
	0xd0, 0x43, 0x90, 0x8a, 0x07, 0xc1, 0x4b, 0x15, 0x89, 0x82, 0x2d, 0xb2, 0xad, 0x17, 0x6f, 0x31,
	0x0c, 0x69, 0xc0, 0x26, 0xeb, 0xee, 0x56, 0xf0, 0x1b, 0xfb, 0x31, 0xa4, 0x49, 0x1a, 0x23, 0xad,
	0x0a, 0x82, 0xb7, 0x6c, 0x66, 0x7e, 0x7f, 0x93, 0x05, 0x9c, 0xf8, 0x8b, 0x28, 0x0e, 0xa7, 0x24,
	0x9e, 0x49, 0xb8, 0x5c, 0x24, 0x2a, 0xc1, 0xc6, 0xc5, 0xdc, 0x57, 0xae, 0x27, 0x78, 0x60, 0x9f,
	0x41, 0x6b, 0x35, 0x8a, 0x02, 0x62, 0xf4, 0xb4, 0x24, 0xa9, 0x70, 0x00, 0x46, 0xec, 0x2f, 0xc8,
	0xd2, 0xfa, 0x9a, 0xd3, 0x1a, 0x76, 0xdd, 0x62, 0xd7, 0xcd, 0x17, 0x67, 0x2f, 0x9c, 0x58, 0xba,
	0x63, 0x9f, 0x40, 0xbb, 0x40, 0x4b, 0x9e, 0xc4, 0x92, 0xb0, 0x05, 0x7a, 0xc4, 0x53, 0x70, 0x83,
	0xe9, 0x11, 0x47, 0x04, 0x83, 0x27, 0x42, 0x59, 0x7a, 0x5f, 0x73, 0x6a, 0x2c, 0x7d, 0xb6, 0x17,
	0xf0, 0x9f, 0x51, 0x18, 0x49, 0x25, 0x7c, 0x15, 0x25, 0xf1, 0x0f, 0x94, 0x0b, 0xda, 0xea, 0x3b,
	0x2d, 0x76, 0xc1, 0x9c, 0x93, 0xff, 0xa8, 0xe6, 0xa9, 0x98, 0xce, 0xf2, 0x93, 0x2d, 0x60, 0xe7,
	0xa3, 0x5c, 0x6e, 0xd5, 0x82, 0x3f, 0x72, 0x19, 0x04, 0x24, 0x65, 0x2a, 0x59, 0x67, 0xeb, 0x63,
	0x1e, 0x42, 0x2f, 0x42, 0x1c, 0x41, 0x8d, 0x13, 0x09, 0x69, 0x55, 0xfb, 0x55, 0xa7, 0x39, 0xec,
	0x6d, 0x5a, 0x5b, 0x93, 0xb2, 0x6c, 0xd1, 0x26, 0x68, 0xde, 0x46, 0x71, 0xf8, 0xdb, 0xd1, 0x1c,
	0xf8, 0x9b, 0xc9, 0x7c, 0x17, 0x69, 0x70, 0x08, 0xcd, 0x92, 0x14, 0xd6, 0xc1, 0x18, 0xdd, 0xcd,
	0xae, 0x3a, 0x15, 0xfc, 0x07, 0x8d, 0xf1, 0xe5, 0x74, 0x3a, 0xf2, 0xae, 0x27, 0x5e, 0x47, 0x1b,
	0xbe, 0x6a, 0x60, 0x66, 0xbf, 0x0c, 0xce, 0xa0, 0x9d, 0xf5, 0x46, 0x22, 0x87, 0xe2, 0x7e, 0xc9,
	0xf9, 0x96, 0x4f, 0xd8, 0x3b, 0xf8, 0x74, 0x9e, 0x19, 0xb4, 0x2b, 0x38, 0x06, 0xf4, 0x48, 0xe5,
	0x84, 0x37, 0x49, 0x90, 0xce, 0x71, 0x6f, 0x5b, 0xa5, 0x19, 0xe7, 0x17, 0x6d, 0xdb, 0x15, 0x3c,
	0x05, 0x63, 0xd5, 0x00, 0x96, 0x3b, 0x2d, 0x35, 0xdf, 0xdb, 0xdd, 0x78, 0xbf, 0x86, 0x9e, 0x9b,
	0xf7, 0x46, 0x28, 0x78, 0xf0, 0x60, 0xa6, 0xb7, 0xe2, 0xf8, 0x2d, 0x00, 0x00, 0xff, 0xff, 0x6e,
	0x0d, 0x4f, 0x02, 0x2b, 0x03, 0x00, 0x00,
}
