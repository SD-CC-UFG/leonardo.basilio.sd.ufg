// Code generated by protoc-gen-go. DO NOT EDIT.
// source: AuthServer.proto

package grpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserLogin struct {
	UserName             string   `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserLogin) Reset()         { *m = UserLogin{} }
func (m *UserLogin) String() string { return proto.CompactTextString(m) }
func (*UserLogin) ProtoMessage()    {}
func (*UserLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4772d30e6de1cdf, []int{0}
}

func (m *UserLogin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserLogin.Unmarshal(m, b)
}
func (m *UserLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserLogin.Marshal(b, m, deterministic)
}
func (m *UserLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLogin.Merge(m, src)
}
func (m *UserLogin) XXX_Size() int {
	return xxx_messageInfo_UserLogin.Size(m)
}
func (m *UserLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLogin.DiscardUnknown(m)
}

var xxx_messageInfo_UserLogin proto.InternalMessageInfo

func (m *UserLogin) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type UserCredential struct {
	UserName             string   `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Expiration           int32    `protobuf:"varint,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Signature            string   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Error                string   `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserCredential) Reset()         { *m = UserCredential{} }
func (m *UserCredential) String() string { return proto.CompactTextString(m) }
func (*UserCredential) ProtoMessage()    {}
func (*UserCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4772d30e6de1cdf, []int{1}
}

func (m *UserCredential) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCredential.Unmarshal(m, b)
}
func (m *UserCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCredential.Marshal(b, m, deterministic)
}
func (m *UserCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCredential.Merge(m, src)
}
func (m *UserCredential) XXX_Size() int {
	return xxx_messageInfo_UserCredential.Size(m)
}
func (m *UserCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCredential.DiscardUnknown(m)
}

var xxx_messageInfo_UserCredential proto.InternalMessageInfo

func (m *UserCredential) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserCredential) GetExpiration() int32 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *UserCredential) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *UserCredential) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*UserLogin)(nil), "Chat.Grpc.UserLogin")
	proto.RegisterType((*UserCredential)(nil), "Chat.Grpc.UserCredential")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthServerClient is the client API for AuthServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthServerClient interface {
	Authenticate(ctx context.Context, in *UserLogin, opts ...grpc.CallOption) (*UserCredential, error)
	SignUp(ctx context.Context, in *UserLogin, opts ...grpc.CallOption) (*UserCredential, error)
	RenewCredential(ctx context.Context, in *UserCredential, opts ...grpc.CallOption) (*UserCredential, error)
}

type authServerClient struct {
	cc *grpc.ClientConn
}

func NewAuthServerClient(cc *grpc.ClientConn) AuthServerClient {
	return &authServerClient{cc}
}

func (c *authServerClient) Authenticate(ctx context.Context, in *UserLogin, opts ...grpc.CallOption) (*UserCredential, error) {
	out := new(UserCredential)
	err := c.cc.Invoke(ctx, "/Chat.Grpc.AuthServer/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) SignUp(ctx context.Context, in *UserLogin, opts ...grpc.CallOption) (*UserCredential, error) {
	out := new(UserCredential)
	err := c.cc.Invoke(ctx, "/Chat.Grpc.AuthServer/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) RenewCredential(ctx context.Context, in *UserCredential, opts ...grpc.CallOption) (*UserCredential, error) {
	out := new(UserCredential)
	err := c.cc.Invoke(ctx, "/Chat.Grpc.AuthServer/RenewCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServerServer is the server API for AuthServer service.
type AuthServerServer interface {
	Authenticate(context.Context, *UserLogin) (*UserCredential, error)
	SignUp(context.Context, *UserLogin) (*UserCredential, error)
	RenewCredential(context.Context, *UserCredential) (*UserCredential, error)
}

func RegisterAuthServerServer(s *grpc.Server, srv AuthServerServer) {
	s.RegisterService(&_AuthServer_serviceDesc, srv)
}

func _AuthServer_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat.Grpc.AuthServer/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).Authenticate(ctx, req.(*UserLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat.Grpc.AuthServer/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).SignUp(ctx, req.(*UserLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_RenewCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).RenewCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat.Grpc.AuthServer/RenewCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).RenewCredential(ctx, req.(*UserCredential))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Chat.Grpc.AuthServer",
	HandlerType: (*AuthServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AuthServer_Authenticate_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _AuthServer_SignUp_Handler,
		},
		{
			MethodName: "RenewCredential",
			Handler:    _AuthServer_RenewCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AuthServer.proto",
}

func init() { proto.RegisterFile("AuthServer.proto", fileDescriptor_d4772d30e6de1cdf) }

var fileDescriptor_d4772d30e6de1cdf = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x8d, 0xb6, 0xa1, 0x3b, 0x88, 0xca, 0xd0, 0x43, 0xac, 0x22, 0x92, 0x93, 0xa7, 0x1c,
	0xf4, 0xe8, 0xa9, 0x56, 0x10, 0x41, 0x3c, 0xa4, 0xf4, 0xe2, 0x45, 0xc6, 0x74, 0x48, 0x17, 0xec,
	0xee, 0x32, 0xbb, 0xb1, 0x5e, 0x7d, 0x4a, 0x5f, 0x47, 0x92, 0x62, 0x53, 0x04, 0x73, 0xe8, 0xf1,
	0xff, 0x67, 0xe7, 0x63, 0xbf, 0x5d, 0x38, 0x19, 0x57, 0x61, 0x31, 0x65, 0xf9, 0x60, 0xc9, 0x9c,
	0xd8, 0x60, 0x51, 0x4d, 0x16, 0x14, 0xb2, 0x07, 0x71, 0x45, 0x7a, 0x0f, 0x6a, 0xe6, 0x59, 0x9e,
	0x6c, 0xa9, 0x0d, 0x9e, 0x81, 0xaa, 0x3c, 0xcb, 0xab, 0xa1, 0x25, 0x27, 0xd1, 0x65, 0x74, 0xa5,
	0xf2, 0x41, 0x5d, 0x3c, 0xd3, 0x92, 0x71, 0x04, 0x03, 0x47, 0xde, 0xaf, 0xac, 0xcc, 0x93, 0xfd,
	0xf5, 0xec, 0x37, 0xa7, 0x5f, 0x11, 0x1c, 0xd5, 0x98, 0x89, 0xf0, 0x9c, 0x4d, 0xd0, 0xf4, 0xde,
	0xcd, 0xba, 0x00, 0xe0, 0x4f, 0xa7, 0x85, 0x82, 0xb6, 0xa6, 0xa1, 0xf5, 0xf3, 0xad, 0x06, 0xcf,
	0x41, 0x79, 0x5d, 0x1a, 0x0a, 0x95, 0x70, 0x72, 0xd0, 0x2c, 0xb7, 0x05, 0x0e, 0xa1, 0xcf, 0x22,
	0x56, 0x92, 0x5e, 0x33, 0x59, 0x87, 0xeb, 0xef, 0x08, 0xa0, 0x35, 0xc5, 0x31, 0x1c, 0xd6, 0xa9,
	0xbe, 0x4d, 0x41, 0x81, 0x71, 0x98, 0x6d, 0xa4, 0xb3, 0x8d, 0xf1, 0xe8, 0xf4, 0x4f, 0xdb, 0x0a,
	0xa4, 0x7b, 0x78, 0x0b, 0xf1, 0x54, 0x97, 0x66, 0xe6, 0x76, 0x59, 0x7e, 0x84, 0xe3, 0x9c, 0x0d,
	0xaf, 0xb6, 0x9e, 0xe4, 0xff, 0xf3, 0x9d, 0xa8, 0xbb, 0xf8, 0xa5, 0x57, 0x8a, 0x2b, 0xde, 0xe2,
	0xe6, 0xf7, 0x6e, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x76, 0x6c, 0xb9, 0x97, 0xd1, 0x01, 0x00,
	0x00,
}
